import json
from collections import Counter

import pandas as pd
import utils
from classify_roof import classify_roof


def gen_val_pred(labels_dict, mode, val_pred_csv, val_target_csv=None):
    val_pred_tuples = []
    for img_id, labels in labels_dict.items():
        labels_1, labels_2, labels_3 = labels
        val_pred_tuples.extend(
            [
                (f"{img_id}_1", labels_1),
                (f"{img_id}_2", labels_2),
                (f"{img_id}_3", labels_3),
            ]
        )
    val_pred_df = pd.DataFrame(val_pred_tuples, columns=["image_id", "Target"])
    val_pred_df.to_csv(
        val_pred_csv, index=False
    )

    # MAE
    if mode != "test":
        val_target_df = pd.read_csv(val_target_csv)
        utils.mae(val_pred_df, val_target_df)

def run_postprocess(experiment_name, mode):
    val_pred_json = f"results/grounding_dino/{mode}_pred_{experiment_name}.json"

    labels_dict = {}
    with open(val_pred_json, "r") as f:
        results = json.load(f)
        for img_id in results:
            bounding_boxes = results[img_id]["boxes"]
            labels_dict[img_id] = classify_roof(img_id, bounding_boxes)
    return labels_dict


def run_postprocess_naive(experiment_name, mode):
    val_pred_json = f"results/grounding_dino/{mode}_pred_{experiment_name}_metal.json"
    labels_dict_metal = {}
    with open(val_pred_json, "r") as f:
        results = json.load(f)
        for img_id in results:
            bounding_boxes = results[img_id]["boxes"]
            labels_dict_metal[img_id] = len(bounding_boxes)

    val_pred_json = f"results/grounding_dino/{mode}_pred_{experiment_name}_grass.json"
    labels_dict_grass = {}
    with open(val_pred_json, "r") as f:
        results = json.load(f)
        for img_id in results:
            bounding_boxes = results[img_id]["boxes"]
            labels_dict_grass[img_id] = len(bounding_boxes)

    labels_dict = {}
    for k in labels_dict_metal:
        labels_dict[k] = (0, labels_dict_metal[k], labels_dict_grass[k])
    return labels_dict


if __name__ == "__main__":
    experiment_name = "naive_0p3_0p4"
    mode = "val"

    if mode == "test":
        val_pred_csv = f"results/grounding_dino/test_pred_{experiment_name}_grounding_dino.csv"
    else:
        val_pred_csv = f"results/grounding_dino/{mode}_pred_{experiment_name}.csv"
    val_target_csv = None
    if mode == "small":
        val_target_csv = "data/val_30_target.csv"
    elif mode == "val":
        val_target_csv = "data/val_target.csv"

    if experiment_name.startswith("naive"):
        labels_dict = run_postprocess_naive(experiment_name, mode)
    else:
        labels_dict = run_postprocess(experiment_name, mode)

    gen_val_pred(labels_dict, mode, val_pred_csv, val_target_csv)
