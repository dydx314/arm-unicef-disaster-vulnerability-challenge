import json
from collections import Counter

import cv2
import pandas as pd
import utils
from classify_roof import classify_roof
from modal_store import REMOTE_DIR, zindi_image, zindi_volumes
from PIL import Image

from modal import App

app = App()

with zindi_image.imports():
    import cv2
    import matplotlib.pyplot as plt
    import requests
    import torch
    from PIL import Image
    from transformers import AutoModelForZeroShotObjectDetection, AutoProcessor


@app.function(image=zindi_image, volumes=zindi_volumes, timeout=14400, gpu="H100:4")
def run_detection(img_ids, text, box_thres=0.15, text_thres=0.15):
    img_dir = f"{REMOTE_DIR}/data/Images"
    device = "cuda"
    model_id = "IDEA-Research/grounding-dino-tiny"

    processor = AutoProcessor.from_pretrained(model_id)
    model = AutoModelForZeroShotObjectDetection.from_pretrained(model_id).to(device)

    results = {}
    for img_id in img_ids:
        image = Image.open(f"{img_dir}/{img_id}.tif")
        inputs = processor(images=image, text=text, return_tensors="pt").to(device)
        with torch.no_grad():
            outputs = model(**inputs)

        result = processor.post_process_grounded_object_detection(
            outputs,
            inputs.input_ids,
            box_threshold=box_thres,
            text_threshold=text_thres,
            target_sizes=[image.size[::-1]],
        )[0]
        results[img_id] = {
            "scores": result["scores"].tolist(),
            "labels": result["labels"],
            "boxes": result["boxes"].tolist(),
        }
    return results


def detect_plot_10():
    train_df = pd.read_csv("data/train.csv")
    img_ids = train_df[:10].image_id.values
    # text = "houses with tin roof."
    text = "metal-roof houses."

    results = run_detection.remote(img_ids, text)

    for img_id in img_ids:
        img_path_local = f"../../Downloads/Images/{img_id}.tif"
        result_dict = results[img_id]
        utils.plot_results(
            img_path_local,
            text,
            result_dict["scores"],
            result_dict["labels"],
            result_dict["boxes"],
            show_plot=False,
            save_path=f"results/grounding_dino/tin/{img_id}.tif",
        )

    # text = "houses with grass-thatched roof."
    text = "grass-roof houses."

    results = run_detection.remote(img_ids, text)

    for img_id in img_ids:
        img_path_local = f"../../Downloads/Images/{img_id}.tif"
        result_dict = results[img_id]
        utils.plot_results(
            img_path_local,
            text,
            result_dict["scores"],
            result_dict["labels"],
            result_dict["boxes"],
            show_plot=False,
            save_path=f"results/grounding_dino/thatched/{img_id}.tif",
        )

        # bboxes = train_df[train_df.image_id == img_id]["bbox"].values
        # labels = train_df[train_df.image_id == img_id]["category_id"].values
        # utils.plot_ground_truth(
        #     img_path_local,
        #     bboxes,
        #     labels,
        #     show_plot=False,
        #     save_path=f"data/img_bbox/{img_id}.tif",
        # )


def plot(img_ids, text, results, show_plot=False):
    for img_id in img_ids:
        img_path_local = f"../../Downloads/Images/{img_id}.tif"
        result_dict = results[img_id]
        utils.plot_results(
            img_path_local,
            text,
            result_dict["scores"],
            result_dict["labels"],
            result_dict["boxes"],
            show_plot=show_plot,
        )


def gen_submission_naive():
    test_df = pd.read_csv("data/final/Test.csv")
    img_ids = test_df.image_id.values
    text = "metal-roof houses."
    results_2 = run_detection.remote(img_ids, text)

    # text = "grass-roof houses."
    # results_3 = run_detection.remote(img_ids, text)

    submission_tuples = []
    for img_id in img_ids:
        submission_tuples.extend(
            [
                (f"{img_id}_1", 0),
                (f"{img_id}_2", len(results_2[img_id]["labels"])),
                (f"{img_id}_3", 0),
            ]
        )
    submission_df = pd.DataFrame(submission_tuples, columns=["image_id", "Target"])
    submission_df.to_csv("results/grounding_dino/test_pred.csv", index=False)


def evaluate_full_test_naive():
    val_df = pd.read_csv("data/final/Test.csv")
    img_ids = val_df.image_id.values
    text = "metal-roof houses."
    results_2 = run_detection.remote(img_ids, text, box_thres=0.4, text_thres=0.4)

    # text = "grass-roof houses."
    # results_3 = run_detection.remote(img_ids, text)
    with open("results/grounding_dino/val_pred_naive.json", "w") as f:
        json.dump(results_2, f)


def evaluate_naive(experiment_name, mode="small"):
    if mode == "small":
        val_df = pd.read_csv("data/val_30.csv")
    elif mode == "val":
        val_df = pd.read_csv("data/val.csv")
    elif mode == "test":
        val_df = pd.read_csv("data/final/Test.csv")

    img_ids = val_df.image_id.values
    text = "metal-roof."
    results_metal = run_detection.remote(img_ids, text, box_thres=0.3, text_thres=0.4)
    with open(f"results/grounding_dino/{mode}_pred_{experiment_name}_metal.json", "w") as f:
        json.dump(results_metal, f)

    text = "grass-roof."
    results_grass = run_detection.remote(img_ids, text, box_thres=0.3, text_thres=0.4)
    with open(f"results/grounding_dino/{mode}_pred_{experiment_name}_grass.json", "w") as f:
        json.dump(results_grass, f)


def evaluate(experiment_name, mode="small"):
    if mode == "small":
        val_df = pd.read_csv("data/val_30.csv")
    elif mode == "val":
        val_df = pd.read_csv("data/val.csv")
    elif mode == "test":
        val_df = pd.read_csv("data/final/Test.csv")

    img_ids = val_df.image_id.values
    text = "roof."  # aim for high recall
    results = run_detection.remote(img_ids, text)
    with open(f"results/grounding_dino/{mode}_pred_{experiment_name}.json", "w") as f:
        json.dump(results, f)


def detect_plot_one(img_id, text):
    results = run_detection.remote([img_id], text)
    img_path_local = f"../../Downloads/Images/{img_id}.tif"
    result_dict = results[img_id]
    utils.plot_results(
        img_path_local,
        text,
        result_dict["scores"],
        result_dict["labels"],
        result_dict["boxes"],
        show_plot=True,
        save_path=f"results/grounding_dino/all/{img_id}.tif",
    )
    return result_dict


def test_extract_patch():
    img_id = "id_av0kj02v1wvd"
    text = "roof"

    result_dict = detect_plot_one(img_id, text)
    print(result_dict)

    img_path_local = f"../../Downloads/Images/{img_id}.tif"
    patches = utils.extract_patches(img_path_local, result_dict["boxes"])

    for i, patch in enumerate(patches):
        # Save the patch
        cv2.imwrite(f"test/patch_{i}.jpg", patch)


@app.local_entrypoint()
def main():
    # evaluate_10()
    # evaluate_val()
    # evaluate_test()
    #evaluate_naive(experiment_name="naive_0p3_0p4", mode="val")
    evaluate(experiment_name="0p15", mode="val")
    #detect_plot_one("id_nhtlvmbctg4m", "rectangle.")
