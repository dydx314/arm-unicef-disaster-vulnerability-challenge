import cv2
import numpy as np
import glob


# lower_gray = np.array([0, 0, 50])
# upper_gray = np.array([180, 50, 150])

# lower_green = np.array([40, 40, 40])
# upper_green = np.array([80, 255, 255])

def classify_roof(img_id, bounding_boxes):
    # Load the image
    img_path_local = f"../../Downloads/Images/{img_id}.tif"
    image = cv2.imread(img_path_local)

    # Convert the image to HSV color space
    #hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Define HSV range for tin (gray/metallic colors)
    tin_lower = np.array([0, 0, 100])
    tin_upper = np.array([180, 50, 255])

    # Define HSV range for grass (green colors)
    grass_lower = np.array([35, 40, 40])
    grass_upper = np.array([85, 255, 255])

    # Iterate through each bounding box
    labels = []
    for bbox in bounding_boxes:
        x, y, w, h = bbox
        
        # Extract region of interest (ROI) within the bounding box
        roi = image[int(y):int(y+h), int(x):int(x+w)]
        
        # Convert ROI to HSV color space
        roi_hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
        
        # Threshold the HSV image based on the defined ranges
        mask_gray = cv2.inRange(roi_hsv, tin_lower, tin_upper)
        mask_green = cv2.inRange(roi_hsv, grass_lower, grass_upper)
        
        # Calculate the percentage of pixels within the bounding box that belong to each category
        total_pixels = w * h
        gray_pixels = cv2.countNonZero(mask_gray)
        green_pixels = cv2.countNonZero(mask_green)
        
        percent_gray = (gray_pixels / total_pixels) * 100
        percent_green = (green_pixels / total_pixels) * 100
        
        # Classify the bounding box based on the dominant category
        labels.append(2 if percent_gray > percent_green else 3)
    return labels


# matching_files = glob.glob('test/patch_*.jpg')
# for file_path in matching_files:
#     result = classify_roof(file_path)
#     print(f'{file_path} is classified as: {result}')
