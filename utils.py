import os
from typing import Tuple

import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from PIL import Image
import numpy as np
import re
import matplotlib.patches as patches
import cv2

# colors for visualization
COLORS = [
    [0.000, 0.447, 0.741],
    [0.850, 0.325, 0.098],
    [0.929, 0.694, 0.125],
    [0.494, 0.184, 0.556],
    [0.466, 0.674, 0.188],
    [0.301, 0.745, 0.933],
]


def split_train_val(df: pd.DataFrame, gen_small=False) -> Tuple[pd.DataFrame, pd.DataFrame]:
    unique_images = df["image_id"].unique()
    train_images, val_images = train_test_split(
        unique_images, test_size=0.2, random_state=42
    )
    train_df = df[df["image_id"].isin(train_images)]
    val_df = df[df["image_id"].isin(val_images)]
    small_df = None
    if gen_small:
        np.random.seed(3)
        sampled_image_ids = np.random.choice(val_images, 30, replace=False)
        small_df = val_df[val_df["image_id"].isin(sampled_image_ids)]
    return train_df, val_df, small_df

def gen_target_df(df):
    image_ids = []
    for img_id in df.image_id.unique():
        image_ids.extend([f"{img_id}_1", f"{img_id}_2", f"{img_id}_3"])
    target_df = pd.DataFrame({"image_id": image_ids})

    target_values = df.groupby(["image_id", "category_id"]).count()["id"].reset_index()
    target_values["category_id"] = target_values["category_id"].astype(int).astype(str)
    target_values["image_id"] = target_values["image_id"] + "_" + target_values["category_id"]
    target_values = target_values[["image_id", "id"]].rename(columns={"id": "Target"})

    target_df = pd.merge(target_df, target_values, on="image_id", how="left").fillna(0)
    target_df["Target"] = target_df["Target"].astype(int)
    return target_df

def mae(pred_df, target_df):
    df = pd.merge(target_df, pred_df, on='image_id', how='left').fillna(0)
    mae_val = mean_absolute_error(df["Target_x"], df["Target_y"])
    print(f"Mean absolute error is {mae_val}")
    diff = (df["Target_y"] - df["Target_x"]).mean()
    if diff < 0:
        print(f"Avg underpredicted by {diff}")
    else:
        print(f"Avg overpredicted by {diff}")

    return mae_val


def decode_points(ddbox: str) -> list:
    points = [np.float32(point) for point in re.findall(r'\d+\.\d+', ddbox)]
    return points

def plot_ground_truth(img_path, bboxes, labels, show_plot=True, save_path=None):
    img = Image.open(img_path)

    fig, ax = plt.subplots(1)

    ax.imshow(img)

    for bbox, label in zip(bboxes, labels):
        x, y, w, h = decode_points(bbox)
        rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
        ax.text(x, y, int(label), fontsize=10, bbox=dict(facecolor='yellow', alpha=0.3))
    plt.axis('off')  # Turn off axis
    if save_path:
        plt.savefig(save_path, bbox_inches="tight")
    if show_plot:
        plt.show()

def plot_results(pil_img, text, scores, labels, boxes, show_plot=True, save_path=None):
    plt.figure(figsize=(16, 10))
    plt.imshow(pil_img)
    ax = plt.gca()
    colors = COLORS * 100
    for score, label, (xmin, ymin, xmax, ymax), c in zip(scores, labels, boxes, colors):
        ax.add_patch(
            plt.Rectangle(
                (xmin, ymin), xmax - xmin, ymax - ymin, fill=False, color=c, linewidth=3
            )
        )
        label = f"{text}: {score:0.2f}"
        ax.text(
            xmin, ymin, label, fontsize=15, bbox=dict(facecolor="yellow", alpha=0.5)
        )
    plt.axis("off")
    if save_path:
        plt.savefig(save_path, bbox_inches="tight")
    if show_plot:
        plt.show()

def extract_patches(image_path, bounding_boxes):
    # Load the image
    image = cv2.imread(image_path)

    # List to hold patches
    patches = []

    # Extract patches based on bounding boxes
    for (x, y, xe, ye) in bounding_boxes:
        patch = image[int(y):int(ye), int(x):int(xe)]
        patches.append(patch)

    return patches

def print_files_in_path(path):
    try:
        # List all files and directories in the specified path
        with os.scandir(path) as entries:
            for entry in entries:
                # Check if the entry is a file
                if entry.is_file():
                    print(entry.name)
    except FileNotFoundError:
        print(f"The path {path} does not exist")
    except PermissionError:
        print(f"Permission denied for the path {path}")
    except Exception as e:
        print(f"An error occurred: {e}")

