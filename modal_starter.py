import modal
from modal import Image, Volume, Mount
import yaml
import json
from tqdm import tqdm

EPOCHS = 60
BATCH_SIZE = 32
OPTIMIZER = "auto"
SEED = 42
NAME = f"Arm_Yolo_{EPOCHS}"
DEVICE = [0]
VERBOSE = False
RESUME = False
PATIENCE = 20
img_width = 500
img_height = 500
LOCAL_DIR = "."
REMOTE_DIR = "."

def read_yaml_file(file_path):
    with open(file_path, 'r') as file:
        try:
            data = yaml.safe_load(file)
            return data
        except yaml.YAMLError as e:
            print("Error reading YAML:", e)
            return None
        
def get_classes_count(pred_json: str):
    classes_count = {}
    classes_count[0] = 0
    classes_count[1] = 0
    classes_count[2] = 0
    for j in json.loads(pred_json):
        classes_count[j['class']] += 1
        
    return classes_count
        
def print_files_in_path(path):
    try:
        # List all files and directories in the specified path
        with os.scandir(path) as entries:
            for entry in entries:
                # Check if the entry is a file
                if entry.is_file():
                    print(entry.name)
    except FileNotFoundError:
        print(f"The path {path} does not exist")
    except PermissionError:
        print(f"Permission denied for the path {path}")
    except Exception as e:
        print(f"An error occurred: {e}")


mount = Mount.from_local_dir(LOCAL_DIR, remote_path="/")

#we build a container and copy our local training data to it
yolo_image = (
    Image.debian_slim(python_version="3.9")
    .pip_install("matplotlib", "numpy", "pandas", "ultralytics", "Pillow", "tqdm")
    .apt_install("libgl1", "libglib2.0-0")
    .copy_mount(mount, remote_path=REMOTE_DIR)
)

volume = modal.Volume.from_name("model-store")
model_store_path = "/vol/models"

with yolo_image.imports():
    import numpy as np
    import pandas as pd 
    import matplotlib.pyplot as plt
    import matplotlib.patches as patches
    from ultralytics import YOLO
    import os
    import json
    from tqdm import tqdm


app = modal.App(
    "yolo-example"
)

@app.function(image=yolo_image,volumes={model_store_path: volume},gpu="any")
def train():
    #here, we assume the python notebook has already been run to setup the repos
    model = YOLO('yolov8n.pt')

    #check image set up correctly
    print_files_in_path("/data")

    ### train
    model.train(
        data = "/data/data.yaml",
        task = 'detect',
        imgsz = (img_height, img_width),
        epochs = EPOCHS,
        batch = BATCH_SIZE,
        optimizer = OPTIMIZER,
        patience = PATIENCE,
        name = NAME,
        seed = SEED,
        val = True,
        resume = RESUME,
        device = DEVICE,
        verbose = VERBOSE
    )
    model.export(
        format = 'onnx', # openvino, onnx, engine, tflite
        imgsz = (img_height, img_width),
        half = False,
        int8 = False,
        simplify = False,
        nms = False,
    )

    ### save model to volume
    model.save(f"{model_store_path}/{NAME}")
    volume.commit()

@app.function(image=yolo_image,volumes={model_store_path: volume},gpu="any")
def test():
    model = YOLO(f"{model_store_path}/{NAME}")
    submission_df = pd.DataFrame(columns=["image_id", "Target"])
    for index, row in tqdm(test.iterrows(), total=len(test)):
        pred = model.predict(f"/data/Images/{row['image_id']}.tif")
        pred_json = get_classes_count(pred[0].tojson())
    
        df = pd.DataFrame({"image_id" : [f"{row['image_id']}_1",
                                        f"{row['image_id']}_2",
                                        f"{row['image_id']}_3"],
                        "Target" : [pred_json[0], pred_json[1], pred_json[2]]},columns=["image_id", "Target"])
        submission_df = pd.concat([submission_df, df], axis = 0)
    
    #save submission file to volume
    submission_df.to_csv(f"{model_store_path}/submission.csv", index=False)
    volume.commit()




@app.local_entrypoint()
def main():
    test.remote()
