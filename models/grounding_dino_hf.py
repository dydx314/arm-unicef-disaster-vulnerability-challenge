import cv2
import matplotlib.pyplot as plt
import requests
import torch
from PIL import Image
from transformers import AutoModelForZeroShotObjectDetection, AutoProcessor

IMG_DIR = "/home/data/Images"

# colors for visualization
COLORS = [
    [0.000, 0.447, 0.741],
    [0.850, 0.325, 0.098],
    [0.929, 0.694, 0.125],
    [0.494, 0.184, 0.556],
    [0.466, 0.674, 0.188],
    [0.301, 0.745, 0.933],
]


def test_inference(device="cuda"):
    image_url = "http://images.cocodataset.org/val2017/000000039769.jpg"
    image = Image.open(requests.get(image_url, stream=True).raw)
    # Check for cats and remote controls
    text = "a cat. a remote control."

    return run_detection([image], text, device)


def run_detection(images, text, box_threshold=0.4, text_threshold=0.3, device="cuda"):
    model_id = "IDEA-Research/grounding-dino-tiny"

    processor = AutoProcessor.from_pretrained(model_id)
    model = AutoModelForZeroShotObjectDetection.from_pretrained(model_id).to(device)

    results = []
    for image in images:
        inputs = processor(images=image, text=text, return_tensors="pt").to(device)
        with torch.no_grad():
            outputs = model(**inputs)

        result = processor.post_process_grounded_object_detection(
            outputs,
            inputs.input_ids,
            box_threshold=box_threshold,
            text_threshold=text_threshold,
            target_sizes=[image.size[::-1]],
        )
        results.append(result[0])
    return results


def plot_results(pil_img, text, results):
    scores, labels, boxes = (
        results["scores"].tolist(),
        results["labels"].tolist(),
        results["boxes"].tolist(),
    )
    plt.figure(figsize=(16, 10))
    plt.imshow(pil_img)
    ax = plt.gca()
    colors = COLORS * 100
    for score, label, (xmin, ymin, xmax, ymax), c in zip(scores, labels, boxes, colors):
        ax.add_patch(
            plt.Rectangle(
                (xmin, ymin), xmax - xmin, ymax - ymin, fill=False, color=c, linewidth=3
            )
        )
        label = f"{text}: {score:0.2f}"
        ax.text(
            xmin, ymin, label, fontsize=15, bbox=dict(facecolor="yellow", alpha=0.5)
        )
    plt.axis("off")
    plt.show()


def load_images():
    # TODO
    pass


def run():
    # load images
    images = load_images()
    text = ""  # TODO

    results = run_detection(images, text)
    plot_results(images[0], results[0])
